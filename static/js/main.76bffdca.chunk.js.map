{"version":3,"sources":["components/footer/footer.jsx","components/title/title.jsx","components/todo-input/todo-input.jsx","components/todo-item/todo-item.jsx","components/todo-list/todo-list.jsx","containers/todo/todo.jsx","actions/actionCreator.js","constants.js","App.js","registerServiceWorker.js","reducers/tasks.js","store/store.js","reducers/filters.js","reducers/index.js","index.js"],"names":["FILTERS_BTN","text","id","Footer","amount","activeFilter","changeFilter","className","map","onClick","key","defaultProps","Title","title","TodoInput","value","onChange","onKeyPress","placeholder","TodoItem","isCompleted","removeTask","completeTask","TodoList","tasksList","Todo","state","taskText","handleInputChange","target","setState","addTask","length","props","Date","getTime","filterTasks","tasks","filter","task","getActiveTasksCounter","this","filters","isTasksExist","filteredTasks","taskCounter","React","Component","connect","type","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","TASKS","load","namespace","preloadedState","rootReducer","combineReducers","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","save","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.76bffdca.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './footer.css';\r\n\r\nconst FILTERS_BTN = [\r\n    {\r\n        text: 'All',\r\n        id: 'all',\r\n    },\r\n    {\r\n        text: 'Active',\r\n        id: 'active',\r\n    },\r\n    {\r\n        text: 'Completed',\r\n        id: 'completed'\r\n    }\r\n];\r\n\r\n\r\nconst Footer = ({amount, activeFilter, changeFilter}) => (\r\n    <div className=\"footer\">\r\n        <span className=\"amount\">{`${amount} Tasks left`}</span>\r\n        <div className=\"btn-group\">\r\n            {FILTERS_BTN.map(({ text, id }) => (\r\n                <button\r\n                onClick={() => {changeFilter(id)}}\r\n                key={id}\r\n                className={id === activeFilter ? \"filter-btn active\" : 'filter-btn'}\r\n                >{text}</button>\r\n            ))}\r\n        </div>\r\n    </div>\r\n)\r\n\r\nFooter.propTypes = {\r\n    amount: PropTypes.number,\r\n    activeFilter: PropTypes.string,\r\n    changeFilter: PropTypes.func\r\n}\r\n  \r\nFooter.defaultProps = {\r\n    changeFilter: () => {},\r\n    amount: 0,\r\n    activeFilter: 'all',\r\n}\r\n\r\nexport default Footer;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './title.css';\r\n\r\nconst Title = ({ title }) => (\r\n    <h1 className=\"title\">{title}</h1>\r\n)\r\n\r\nTitle.propTypes = {\r\n    title: PropTypes.string,\r\n}\r\n\r\nTitle.defaultProps = {\r\n    title: 'Simple title',\r\n}\r\n\r\nexport default Title;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-input.css';\r\n\r\nconst TodoInput = ({ value, onChange, onKeyPress }) => (\r\n    <div className=\"todo-input-wrapper\">\r\n        <i className=\"fas fa-plus\" />\r\n        <input\r\n            className=\"todo-input\"\r\n            placeholder=\"Click to add task\"\r\n            onChange={onChange}\r\n            value={value}\r\n            onKeyPress={onKeyPress}\r\n        />\r\n    </div>\r\n)\r\n\r\nTodoInput.propTypes = {\r\n    onChange: PropTypes.func,\r\n    onKeyPress: PropTypes.func,\r\n    value: PropTypes.string,\r\n}\r\n  \r\nTodoInput.defaultProps = {\r\n    onChange: () => {},\r\n    onKeyPress: () => {},\r\n    value: '',\r\n}\r\nexport default TodoInput;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport './todo-item.css';\r\n\r\nconst TodoItem = ({ text, isCompleted, removeTask, id, completeTask }) => (\r\n    <li className=\"todo-item\">\r\n        <i onClick={() => completeTask(id)} className={isCompleted ? 'mark far fa-check-circle' : 'mark far fa-circle'} />\r\n        <span className={isCompleted ? 'completed text' : 'text'}>{text}</span>\r\n        <i onClick={() => removeTask(id)} className=\"fas fa-times\" />\r\n    </li>\r\n);\r\n\r\nTodoItem.propTypes = {\r\n    text: PropTypes.string,\r\n    isCompleted: PropTypes.bool,\r\n    removeTask: PropTypes.func,\r\n    completeTask: PropTypes.func,\r\n    id: PropTypes.number\r\n}\r\n  \r\nTodoItem.defaultProps = {\r\n    text: '',\r\n    isCompleted: false,\r\n    removeTask: () => {},\r\n    completeTask: () => {},\r\n    id: 0\r\n}\r\n  \r\n\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport {TodoItem} from '../../components';\r\n\r\nimport './todo-list.css';\r\n\r\n\r\nconst TodoList = ({ tasksList, removeTask, completeTask }) => (\r\n    <ul className=\"todo-list\">\r\n        {tasksList.map(({ id, text, isCompleted }) => (\r\n            <TodoItem completeTask={completeTask} removeTask={removeTask} id={id} key={id} text={text} isCompleted={isCompleted} />\r\n        ))}\r\n    </ul>\r\n);\r\n  \r\n  \r\n\r\nTodoList.propTypes = {\r\n    tasksList: PropTypes.array,\r\n    removeTask: PropTypes.func,\r\n    completeTask: PropTypes.func\r\n}\r\n  \r\nTodoList.defaultProps = {\r\n    tasksList: [],\r\n    removeTask: () => {},\r\n    completeTask: () => {}\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\r\nimport {Footer, TodoList, TodoInput} from '../../components';\r\n\r\nimport {addTask , removeTask, completeTask, changeFilter} from '../../actions/actionCreator'\r\nimport {connect} from 'react-redux'\r\n\r\nimport './todo.css';\r\n  \r\n\r\nclass Todo extends React.Component {\r\n    state = {\r\n        taskText: ''\r\n    }\r\n\r\n    handleInputChange = ({target: {value}}) => {\r\n        this.setState({\r\n            taskText: value\r\n        }) \r\n    }\r\n\r\n    addTask = ({key}) => {\r\n        const {taskText} = this.state \r\n        if (taskText.length > 3 && key === 'Enter') {\r\n            const {addTask} = this.props;\r\n\r\n            addTask((new Date()).getTime(), taskText, false)\r\n\r\n            this.setState({\r\n                taskText: ''\r\n            })\r\n        }\r\n    }\r\n    \r\n    filterTasks = (tasks, activeFilter) => {\r\n        switch (activeFilter) {\r\n            case 'completed': \r\n                return tasks.filter(task => task.isCompleted)\r\n            case 'active':\r\n                return tasks.filter(task => !task.isCompleted)\r\n            default:\r\n                return tasks\r\n        }\r\n    }\r\n\r\n    getActiveTasksCounter = tasks => tasks.filter(task => !task.isCompleted).length\r\n\r\n\r\n    render() {\r\n        const { taskText } = this.state;\r\n        const {tasks, removeTask, completeTask, filters, changeFilter} = this.props;\r\n        const isTasksExist = tasks && tasks.length > 0;\r\n        const filteredTasks = this.filterTasks(tasks, filters)\r\n        const taskCounter = this.getActiveTasksCounter(tasks)\r\n\r\n        return (\r\n            <div className=\"todo-wrapper\">\r\n                <TodoInput onKeyPress={this.addTask} onChange={this.handleInputChange} value={taskText} />\r\n                {isTasksExist && <TodoList completeTask={completeTask} removeTask={removeTask} tasksList={filteredTasks} />}\r\n                {isTasksExist && <Footer changeFilter={changeFilter} amount={taskCounter} activeFilter={filters} />}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = ({tasks, filters}) => ({\r\n    tasks,\r\n    filters\r\n})\r\n\r\nexport default connect(mapStateToProps, {addTask, removeTask, completeTask, changeFilter})(Todo);","import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK, CHANGE_FILTER} from '../constants'\r\n\r\nexport const addTask = (id, text, isCompleted) => ({\r\n    type: ADD_TASK,\r\n    id,\r\n    text,\r\n    isCompleted\r\n});\r\n\r\nexport const removeTask = id => ({\r\n    type: REMOVE_TASK,\r\n    id\r\n});\r\n\r\nexport const completeTask = id => ({\r\n    type: COMPLETE_TASK,\r\n    id\r\n});\r\n\r\nexport const changeFilter = activeFilter => ({\r\n    type: CHANGE_FILTER,\r\n    activeFilter\r\n})\r\n\r\n","export const ADD_TASK = 'ADD_TASK'\r\nexport const REMOVE_TASK = 'REMOVE_TASK'\r\nexport const COMPLETE_TASK = 'COMPLETE_TASK'\r\n\r\nexport const CHANGE_FILTER = 'CHANGE_FILTER'","import React from 'react';\r\nimport './App.css';\r\nimport ToDo from './containers/todo/todo'\r\nimport {Title} from './components'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Title title=\"Todo App\"/>\r\n      <ToDo/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n        // [::1] is the IPv6 localhost address.\r\n        window.location.hostname === '[::1]' ||\r\n        // 127.0.0.1/8 is considered localhost for IPv4.\r\n        window.location.hostname.match(\r\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n  \r\nexport default function register() {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n        // The URL constructor is available in all browsers that support SW.\r\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n        if (publicUrl.origin !== window.location.origin) {\r\n            // Our service worker won't work if PUBLIC_URL is on a different origin\r\n            // from what our page is served on. This might happen if a CDN is used to\r\n            // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n            return;\r\n        }\r\n  \r\n        window.addEventListener('load', () => {\r\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n            if (isLocalhost) {\r\n                // This is running on localhost. Lets check if a service worker still exists or not.\r\n                checkValidServiceWorker(swUrl);\r\n\r\n                // Add some additional logging to localhost, pointing developers to the\r\n                // service worker/PWA documentation.\r\n                navigator.serviceWorker.ready.then(() => {\r\n                console.log(\r\n                    'This web app is being served cache-first by a service ' +\r\n                    'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n                );\r\n                });\r\n            } else {\r\n                // Is not local host. Just register service worker\r\n                registerValidSW(swUrl);\r\n            }\r\n        });\r\n    }\r\n}\r\n  \r\nfunction registerValidSW(swUrl) {\r\n    navigator.serviceWorker\r\n        .register(swUrl)\r\n        .then(registration => {\r\n            registration.onupdatefound = () => {\r\n                const installingWorker = registration.installing;\r\n                installingWorker.onstatechange = () => {\r\n                    if (installingWorker.state === 'installed') {\r\n                        if (navigator.serviceWorker.controller) {\r\n                            // At this point, the old content will have been purged and\r\n                            // the fresh content will have been added to the cache.\r\n                            // It's the perfect time to display a \"New content is\r\n                            // available; please refresh.\" message in your web app.\r\n                            console.log('New content is available; please refresh.');\r\n                        } else {\r\n                            // At this point, everything has been precached.\r\n                            // It's the perfect time to display a\r\n                            // \"Content is cached for offline use.\" message.\r\n                            console.log('Content is cached for offline use.');\r\n                        }\r\n                    }\r\n                };\r\n            };\r\n        })\r\n        .catch(error => {\r\n            console.error('Error during service worker registration:', error);\r\n        });\r\n}\r\n  \r\nfunction checkValidServiceWorker(swUrl) {\r\n// Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl)\r\n        .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n            if (\r\n                response.status === 404 ||\r\n                response.headers.get('content-type').indexOf('javascript') === -1\r\n            ) {\r\n                // No service worker found. Probably a different app. Reload the page.\r\n                navigator.serviceWorker.ready.then(registration => {\r\n                registration.unregister().then(() => {\r\n                    window.location.reload();\r\n                });\r\n                });\r\n            } else {\r\n                // Service worker found. Proceed as normal.\r\n                registerValidSW(swUrl);\r\n            }\r\n        })\r\n        .catch(() => {\r\n            console.log(\r\n                'No internet connection found. App is running in offline mode.'\r\n            );\r\n        });\r\n}\r\n  \r\nexport function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n        navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister();\r\n        });\r\n    }\r\n}\r\n  ","import {ADD_TASK, REMOVE_TASK, COMPLETE_TASK} from '../constants'\r\nimport {load} from 'redux-localstorage-simple'\r\n\r\nlet TASKS = load({namespace: 'todo-list'})\r\n\r\nif (!TASKS || !TASKS.tasks || !TASKS.tasks.length) {\r\n    TASKS = {\r\n        tasks: []\r\n    }\r\n}\r\n\r\nconst tasks = (state = TASKS.tasks, {id, text, isCompleted, type}) => {\r\n    switch (type) {\r\n        case ADD_TASK: \r\n            return [\r\n                ...state, {\r\n                    id,\r\n                    text,\r\n                    isCompleted\r\n                }\r\n            ];\r\n        case REMOVE_TASK: \r\n            return [...state].filter(task => task.id !== id)\r\n        case COMPLETE_TASK: \r\n            return [...state].map(task => {\r\n                if(task.id === id) {\r\n                    task.isCompleted = !task.isCompleted\r\n                }\r\n                return task\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default tasks","import {createStore, compose, applyMiddleware} from 'redux'\r\nimport rootReducer from '../reducers/index'\r\nimport {save} from 'redux-localstorage-simple'\r\n\r\n\r\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\r\n\r\nconst configureStore = preloadedState => (\r\n    createStore(\r\n        rootReducer,\r\n        preloadedState,\r\n        composeEnhancers(\r\n            applyMiddleware(save({namespace: 'todo-list'}))\r\n        )\r\n    )\r\n)\r\n\r\nconst store = configureStore({})\r\n\r\nexport default store","import {CHANGE_FILTER} from '../constants'\r\n\r\nconst BASE_FILTER = \"all\";\r\n\r\nconst filter = (state = BASE_FILTER, {type, activeFilter}) => {\r\n    switch (type) {\r\n        case CHANGE_FILTER:\r\n            return activeFilter;\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default filter","import {combineReducers} from 'redux'\r\nimport tasks from './tasks'\r\nimport filters from './filters'\r\n\r\nconst rootReducer = combineReducers({tasks, filters})\r\n\r\nexport default rootReducer","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport registerServiceWorker from './registerServiceWorker';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store/store'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App/>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}